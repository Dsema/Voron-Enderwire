# Este comando se ejecuta 1 segundo después de que la impresora se haya iniciado por completo
[delayed_gcode INICIO]
initial_duration: 3
gcode:
    LED_PRINTING

[gcode_macro _PARKING_POSITION]
gcode:
  G1 X67.50 Y235 Z1.5 F6000             # Coordenadas encima del cubo de residuos


[gcode_macro MOVE_TO_CENTER]
gcode:
    G90                                 # Absolute Positioning
    G0 X108.5 Y125 F6000


[gcode_macro _CUT_FILAMENT]
gcode:
  G0 X200 F6000
  G0 X215 F1000
  G0 X200 F1000


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  END_PRINT
  CANCEL_PRINT_BASE


[gcode_macro START_PRINT]
variable_parameter_EXTRUDER_TEMP: 210
variable_parameter_BED_TEMP: 50
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}

    # LED_PRINTING
    G90                                 # Absolute Positioning
    G92 E0                              # Reset Extruder
    G28                                 # Home all axes

    M104 S{EXTRUDER_TEMP}               # Heat hotend
    M140 S{BED_TEMP}                    # set bed temp
    
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    BED_MESH_PROFILE LOAD=default
    
    _PARKING_POSITION

    M109 S{EXTRUDER_TEMP}               # wait for extruder temp
    M190 S{BED_TEMP}                    # Heat bed and wait
    
    CLEAN_NOZZLE
    CALIBRATE_Z
    _PARKING_POSITION
    REVO_LOAD_FILAMENT
    CLEAN_NOZZLE
    
    G90                                 # Absolute Positioning
    G1 Z2.0 F3000                       # Move Z Axis up little to prevent scratching of Heat Bed
    G1 X0.2 Y20 Z0.4 F5000.0            # Move to start position
    G1 X0.2 Y200.0 Z0.4 F1500.0 E15     # Draw the first line
    G1 X0.4 Y200.0 Z0.4 F5000.0         # Move to side a little
    G1 X0.4 Y20 Z0.4 F1500.0 E30        # Draw the second line
    G92 E0                              # Reset Extruder
    G1 Z2.0 F3000                       # Move Z Axis up little to prevent scratching of Heat Bed          #Estas dos últimas líneas hacen que la altura de capa cambie, baje y choque el nozzle contra la cama
    G1 X5 Y20 Z0.4 F5000.0              # Move over to prevent blob squish


[gcode_macro END_PRINT]
gcode:
    SET_SKEW CLEAR=1
    # REVO_UNLOAD_FILAMENT
    M140 S0                             # Turn off bed
    M104 S0                             # Turn off hotend
    M106 S0                             # Turn off fan
    G91                                 # Relative Positioning
    # G1 X-2 Y-2 E-3 F600                 # Move nozzle away from print while retracting
    G1 E-3 F600                         # Retract filament
    G1 Z10 F6000                        # Raise nozzle by 10mm
    G90                                 # Absolute Positioning
    G28 X                               # Home X
    G28 Y                               # Home Y
    REVO_UNLOAD_FILAMENT
    # LED_FIN_IMPRESION
    # M84                                 # Disable steppers


[gcode_macro PLA]
gcode:
    M104 S210                           # Heat hotend
    M140 S50                            # Heat bed


[gcode_macro ABS]
gcode:
    M104 S260                           # Heat hotend
    M140 S100                           # Heat bed

    
[gcode_macro ASA]
gcode:
    M104 S240                           # Heat hotend
    M140 S100                           # Heat bed


[gcode_macro PETG]
gcode:
    M104 S265                           # Heat hotend
    M140 S70                            # Heat bed


[gcode_macro TPU]
gcode:
    M104 S230                           # Heat hotend
    M140 S40                            # Heat bed


[gcode_macro M600]                      # Cambio de Filamento
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    M109 S210
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro CLEAN_NOZZLE]
variable_start_x: 67.50
variable_start_y: 235                   # No puede superar 235
variable_start_z: 1.5
variable_wipe_dist_x: 60
variable_wipe_dist_y: 2
variable_wipe_qty: 3
variable_wipe_speed: 50
variable_raise_distance: 2
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  G90                                   # Absolute positioning
  _PARKING_POSITION
  
  {% for wipes in range(0, wipe_qty) %}
    G1 X{start_x - wipe_dist_x} F{wipe_speed * 300}
    # G1 Y{start_y - wipe_dist_y} F{wipe_speed * 300}
    G1 X{start_x} F{wipe_speed * 300}
    # G1 Y{start_y} F{wipe_speed * 300}
  {% endfor %}
  
  G1 Z{raise_distance}                   # Raise nozzle after complete


[gcode_macro UNLOAD_FILAMENT]
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Heating Extruder")}
    G109 S180
  {% endif %}
  
    SAVE_GCODE_STATE NAME=UNLOAD_state
    {% set Z = params.Z|default(50)|int %}
    {% set axis_max = printer.toolhead.axis_maximum %}
    {% set pos = printer.toolhead.position %}
 
    {% set z_diff = axis_max.z - pos.z %}
    {% set z_safe_lift = [ Z, z_diff ] | min%}
 
    G91                                 # Relative positioning
    G0 Z{ z_safe_lift }                 # Lift Z
    G92 E0                              # Reset extruder position
    G1 E5.0 F300                        # Extrude a little
    G1 E-50 F{ 10 * 60 }                # Perform the unload
    G1 E-50 F{ 5 * 60 }                 # Finish the unload
    RESTORE_GCODE_STATE NAME=UNLOAD_state


[gcode_macro LOAD_FILAMENT]
gcode:
  # {% if printer.extruder.temperature < 180 %}
  #   {action_respond_info("Heating Extruder")}
  #   G109 S180
  # {% endif %}
  
    SAVE_GCODE_STATE NAME=LOAD_state
    G91                                 # Relative coords
    G1 E50 F{ 5 * 60 }                  # Extrude
    G4 P{ 0.9 * 1000 }                  # Dwell (ms)
    # G1 E25.0 F{ 5 * 60 }                # Extrude a little more
    #_ENABLE_FS
    RESTORE_GCODE_STATE NAME=LOAD_state


[gcode_macro PURGE]
gcode:
  {% if printer.extruder.temperature < 180 %}
    {action_respond_info("Heating Extruder")}
    G109 S180
  {% endif %}
  
  {% set PURGE_AMOUNT = params.PURGE_AMOUNT|default(40)|float %}
    SAVE_GCODE_STATE NAME=PURGE_state
    G91                                 # Relative coords
    G1 E{PURGE_AMOUNT} F{ 5 * 60 }      # Purge
    RESTORE_GCODE_STATE NAME=PURGE_state

    
[gcode_macro REVO_LOAD_FILAMENT]
gcode:
    M83                                 # extruder relative mode
    # G1 E-2 F800                         # extrude slightly
    G1 E18 F800                         # retract filament from revo melt zone


[gcode_macro REVO_UNLOAD_FILAMENT]
gcode:
    M83                                 # extruder relative mode
    G1 E2 F800                          # extrude slightly
    G1 E-18 F800                        # retract filament from revo melt zone

[gcode_macro REVO_CHANGE_NOZZLE]
gcode:
    MOVE_TO_CENTER
    G1 Z100 F6000


[gcode_macro Attach_Probe]
description: Attaches Klicky Probe
gcode:
  G1 X164 Z25 F6000
  SET_SERVO SERVO=klicky_servo ANGLE=40
  G4 P500
  SET_SERVO SERVO=klicky_servo ANGLE=100


[gcode_macro Dock_Probe]
description: Docks Klicky Probe
gcode:
  G1 X164 Z25 F6000
  SET_SERVO SERVO=klicky_servo ANGLE=40
  G4 P250
  G1 X108.5 F6000
  SET_SERVO SERVO=klicky_servo ANGLE=100


[gcode_macro Cut_Filament]
description: Cut filament
gcode:
  G91                                 # Relative coords
  G1 Z2 F6000
  G90                                 # Absolute coords
  SET_SERVO SERVO=cutter_servo ANGLE=180
  G1 Z2 F6000
  G1 X67.50 F6000
  G1 X24 F3000
  G1 X67.50 F3000
  SET_SERVO SERVO=cutter_servo ANGLE=5



[gcode_macro Check_Probe]
description: Verifica el Klicky Probe e intenta recolocarlo hasta 3 veces
gcode:
  # Variable para controlar el éxito
  {% set success = false %}
  
  # Bucle de 3 intentos
  {% for attempt in range(1, 4) %}
      # Saltar el resto del bucle si ya tuvimos éxito
      {% if not success %}
          # Probar la sonda
          QUERY_PROBE
          G4 P500             ; Pequeña pausa para estabilizar
          # Verificar resultado
          # IMPORTANTE: Para Klicky Probe, "probe: open" significa que está bien
          # Esto corresponde a printer.probe.last_query = False
          {% if not printer.probe.last_query %}
              M118 Intento {attempt}: Klicky Probe correctamente colocado.
              {% set success = true %}
          {% elif attempt < 3 %}
              M118 Intento {attempt}: Klicky Probe NO colocado correctamente. Reintentando...
              # Para Klicky Probe: intentar acoplar/desacoplar
              DOCK_PROBE      ; Desacoplar el Klicky (si tienes esta macro)
              G4 P1000        ; Esperar 1 segundo
              ATTACH_PROBE    ; Volver a acoplar el Klicky (si tienes esta macro)
              G4 P1000        ; Esperar 1 segundo
          {% else %}
              # Último intento fallido
              M118 ERROR: Después de 3 intentos, el Klicky Probe sigue sin estar correctamente colocado.
              M118 Verifique manualmente la conexión magnética y posición del Klicky Probe.
              M118 Deteniendo la impresión por seguridad.
              CANCEL_PRINT    ; Cancela la impresión actual
          {% endif %}
      {% endif %}
  {% endfor %}


[gcode_macro HOME]
gcode:
  G90                                   # Absolute Positioning
  G92 E0                                # Reset Extruder
  G28                                   # Home all axes


[gcode_macro BED_SCREWS_CALCULATE]
gcode:
  Attach_Probe
  # Check_Probe
  SCREWS_TILT_CALCULATE
  # Dock_Probe


[gcode_macro Z_OFFSET_CALCULATE]
gcode:
  CALIBRATE_Z


[gcode_macro CONFIG_SAVE]
gcode:
  SAVE_CONFIG


[gcode_macro BED_MESH]
gcode:
  BED_MESH_CALIBRATE


[gcode_macro UPDATE_GIT]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}


[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True


[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 10.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 4
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
  Attach_Probe
  # Check_Probe
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "bicubic" %}
	    {% if "algorithm" in bedMeshConfig %}
	        {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}
            {% if meshPointX >=7 or meshPointY >=7 %}
                {% set algorithm = "bicubic" %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}
  Dock_Probe

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    